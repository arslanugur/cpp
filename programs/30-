Matrix Subtraction

#include <iostream>
using namespace std;
int main()
{
int m, n, c, d, first[10][10], second[10][10], difference[10][10];

cout<<"Enter the number of rows and columns of matrix\n";
cin>>m>>n;
cout<<"Enter the elements of first matrix\n";

for (c = 0; c < m; c++)
for (d = 0 ; d < n; d++)
cin>>first[c][d];

cout<<"Enter the elements of second matrix\n";

for (c = 0; c < m; c++)
for (d = 0; d < n; d++)
cin>>second[c][d];

for (c = 0; c < m; c++)
for (d = 0; d < n; d++)
difference[c][d] = first[c][d] - second[c][d];
/* Subtract Matrices*/

cout<<"difference of entered matrices:-\n";

for (c = 0; c < m; c++)
{
for (d = 0; d < n; d++)
cout<<difference[c][d]<<"\t";

cout<<"\n";
} return 0; }

/*
Output:
Enter the number of rows and columns of matrix                                     
2                                                                                  
2                                                                                  
Enter the elements of first matrix                                                 
1 1                                                                                
1 1                                                                                
Enter the elements of second matrix                                                
2 2                                                                                
2 2                                                                                
difference of entered matrices:-                                                          
-1       -1                                                                          
-1       -1 
*/





nCr & nPr

#include <iostream>
using namespace std;
long factorial(int);
long find_ncr(int, int);
long find_npr(int, int);

main()
{
int n, r;
long ncr, npr;

cout<<"Enter the value of n and r\n";
cin>>n>>r;

ncr = find_ncr(n, r);
npr = find_npr(n, r);

cout<<n<<"C"<<r<<" ="<<ncr<<"\n";
cout<<n<<"P"<<r<<"=" <<npr<<"\n";

return 0;
}

long find_ncr(int n, int r)
{
long result;

result = factorial(n)/(factorial(r)*factorial(n-r));

return result;
}

long find_npr(int n, int r)
{
long result;

result = factorial(n)/factorial(n-r);

return result;
}

long factorial(int n)
{
int c;
long result = 1;
for( c = 1 ; c <= n ; c++ )
result = result*c;
return ( result );
}


Output:

Enter the value of n and r                                                         
2                                                                                  
3                                                                                  
2C3 =0                                                                             
2P3=2  

Download this app for more programs and tutorials
https://play.google.com/store/apps/details?id=com.codetoinvent.malik.cplusplus


LCM & HCF

#include <iostream>
using namespace std;
long gcd(long, long);
int main() {
long x, y, hcf, lcm;

cout<<"Enter two integers\n";
cin>>x>>y;

hcf = gcd(x, y);
lcm = (x*y)/hcf;

cout<<"Greatest common divisor of "<<x <<"and"<<y<<" = "<<hcf<<"\n";
cout<<"Least common multiple of "<< x <<"and "<< y<<"= "<<lcm<<"\n";

return 0;
}

/*if 1st no is 0 then 2nd no is gcd
make 2nd no 0 by subtracting smallest from largest and return 1st no as gcd*/
long gcd(long x, long y) {
if (x == 0) {
return y;
}

while (y != 0) {
if (x > y) {
x = x - y;
}
else {
y = y - x;
}
}

return x;
}


Output:

Enter two integers                                                                 
4 7                                                                                
Greatest common divisor of 4and7 = 1                                               
Least common multiple of 4and 7= 28 

Download this app for more programs and tutorials
https://play.google.com/store/apps/details?id=com.codetoinvent.malik.cplusplus
Armstrong num

#include <iostream>
using namespace std;
int main()
{
int r;
long number = 0, c, sum = 0, temp;

cout<<"Enter an integer upto which you want to find armstrong numbers\n";
cin>>number;

cout<<"Following armstrong numbers are found from 1 to"<<number<<"\n";

/if sum of cubes of each digit in a number is same as the number then it is called as armstrong no./
for( c = 1 ; c <= number ; c++ )
{
temp = c;
while( temp != 0 )
{
r = temp%10;
sum = sum + r*r*r;
temp = temp/10;
/taking unit place digits cube and adding into sum/
}
if ( c == sum )
cout<<c<<"\n";
/If no is Armstrong no then print/
sum = 0;
}

return 0;
}


Output:

Enter an integer upto which you want to find armstrong numbers                     
9000                                                                               
Following armstrong numbers are found from 1 to9000                                
1                                                                                  
153                                                                                
370                                                                                
371                                                                                
407 

Download this app for more programs and tutorials
https://play.google.com/store/apps/details?id=com.codetoinvent.malik.cplusplus



dynamic memory allocation(constructor & destructor)

#include <iostream>
using namespace std;

class Cube
{
public:
Cube() {
cout << "Constructor is called!" <<endl;
}
~Cube() {
cout << "Destructor is called!" <<endl;
}
};

int main( )
{
Cube* myCubeArray = new Cube[5];

delete [] myCubeArray; // Delete array

return 0;
}

/*
Output:
Constructor is called!
Constructor is called!
Constructor is called!
Constructor is called!
Constructor is called!
Destructor is called!
Destructor is called!
Destructor is called!
Destructor is called!
Destructor is called!*/


