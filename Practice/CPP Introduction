01. Programlama Terminolojisi                   01. Sınıf (Class)                                         01. Önişlemci (Preprocessors)
02. C++ Nedir ?                                 02. Sınıf Fonksiyonlan (Class Functions)                  02. Başlık Dosyası (Header File)
03. Algoritma                                   03. Sınıf Yapıcı ve Yıkıcı (Constructors Destructors)     03. İleriye Dönük Tanımlama
04. Programlamaya Giriş                         04. Sınıf Statik Elemanlar (Static Members)               04. Satır içi Fonksiyon
05. Değişkenler                                 05. Sınıf Miras/Kalıtım (Inheritance)                     05. Şablon (Template)
06. Değişken ve RAM                             06. Erişim Kontrolü (Access Control)                      06. Bellek Tahsisi (Stack-Heap)
07. Değişken ve İşaretçi                        07. Kapsülleme (Encapsulation)                            07. İstisnalar
08. Temel Veri Türleri                          08. Polimorfizm (Polymorphism)                            08. Faydalı Kütüphaneler
09. Aritmetik Operatörler                       09. Arayüz(Interface)                                     09. Ömek Uygulama
10. Diziler                                     10. Soyut (Abstract)                                      10. Kapanış
11. Akış Kontrolleri (If, For,While, Switch)    11. Aşın Yükleme
12. Kapsam (Scope)                              12. Dönüşüm (Casting)
13. Fonksiyonlar                                13. This Parametresi
14. Fonksiyon ve İşaretçi                       14. Sanal Metod (Virtual Method)
15. Fonksiyon Değer İle Geçiş                   15. Ezme (Override)
16. Fonksiyon İşaretçi İle Geçiş
17. Fonksiyon Referans ile Geçiş
18. Geri Çağırma Fonksiyonu (Call Back Function)


# Terminology

--> Derleyici - Compiler
1. Herhangi bir dilde yazılmış olan kodu istenilen başka bir kod haline dönüştüren programdır.
2. Diğer bir tanım ise daha üst seviye bir dilden daha alt seviyeli bir dile tercüme olarak kabul edilebilir.
3. Derleyiciler bu kod üretim sırasında, üretilen kodun en verimli şekilde üretilmesi için kod iyileştirmesi (optimizasyon) da yapabilir.
4. Aynı zamanda kaynak kod içinde (source code) bulunan hataların yakalanması ve bu hataların programcıya bildirilmesi de derleyicilerin diğer görevlerinden birisidir.
5. Derleyiciler günümüzde daha çok, bir dilde yazılmış olan koddan, işletim sistemi ve donanım uyumlu kodların üretilmesinde kullanılmaktadır.

        Visual C++ (cl), Intel C++ Compiler (icc),GCC (g++)

--> Bağlayıcı - Linker
Derleyici tarafından nesne (.obj) dosyasına çevrilen bir veya birden çok dosyanın birbirleri ile ilişkilendirmesi 
  ve işletim sisteminin rahatça çalıştırabileceği tek bir çalıştırılabilir dosyaya çevrilmesini sağlayan programdir.
  Dosya çağırma gibi.


--> Versiyonlama
Geliştirilen program üzerinde bir değişiklik olduğunda, bu değişikliği gösteren sayısal ifadeler.
Örn: 1.0.5 şeklindedir. Bunu xyz olarak düşünebilirsiniz.
1. Önceki sürümle uyumsuz değişiklikler yaptığınızda x hanesini değiştirmelisiniz.
2. Önceki sürümle uyumlu değişiklikler yaptığınızda y hanesini değiştirmelisiniz.
3. Önceki sürümle uyumlu bir hata düzeltmesi yaptığınızda z hanesini değiştirmelisiniz.

  Son hane yani z hanesi yama (hata düzeltme) hanesidir.






# Statements - İfadeler
Bir fikri başka kişiye iletmek istediğimizde, genellikle cümleler halinde yazar veya konuşuruz. 
Tıpkı konuşma dilinde olduğu gibi, C++ programımıza bir şey yaptırmak istediğimizde ifadeleri kullanırız. 
C++ dilinde tek bir ifade birçok makine dili talimatına denk gelebilir.
1.Declaration statements - Tanımlama
2.Jump statements 
3.Expression statements
4.Compound statements
5.Selection statements
6.Iteration statements
7.Try blocks



# Functions and the main function
C++'da ifadeler tipik olarak fonksiyon adı verilen birimler halinde gruplandırılır. 
Bir fonksiyon, sırayla (yukarıdan aşağıya doğru sırayla) yürütülen bir "ifadeler topluluğudur."
Her C++ programinin main (tümü küçük harfler) adında özel bir işlevi olmalıdır. 
Program çalıştırıldığında, main içindeki ifadeler sırayla yürütülür.

Derleyici, main function - ifadelerin bulunduğu blok
derleyici main function var mı diye arar. derleyici main functiona gider ve oradaki ifadeleri çalıştırır.

#include <iostream>

int main()
{
        std::cout << "Helo World";
        return 0;
}


# Değişken
1. İşlem yapılacak sayılar belleğe gönderilmeli.
2. Yapılacak işlem, işlem merkezine gönderilmeli.
3. Önceden belleğe yazılan sayılar bellekten olunur.
   ve işlem merkezinde işlem görür.
4. Çıkan sonuç belleğe yazılır ve sonrasında kullanılır.

RAM - Bellek (Değişken değerleri (verileri) aklında tutar.)
CPU - İşlemci (Bellekten değerleri okur.)


CPP'da doğrudan belleğe erişme izni verilmez.
Bellekte adres ve değer kısmı vardır. 


Tüm bilgisayarlarda, programlarınızın kullanabileceği RAM (rastgele erişim belleğinin kısaltması) adı verilen bir parça bulunur. 
RAM'i, program çalışırken her biri bir veri parçasını tutmak için kullanılabilen bir dizi numaralı posta kutusu olarak düşünebilirsiniz. 
Bellekte bir yerde saklanan tek bir veri parçasına "değer" denir.
C++'da doğrudan belleğe erişime izin verilmez. 
Bunun yerine, bir nesne aracılığıyla dolaylı olarak belleğe erişiriz.
Buradaki kilit nokta, git 7532 numaralı posta kutusunda depolanan değeri al demek yerine, 
                      git bu nesnenin depoladığı değeri al diyebiliriz. 
Bu, değerleri depolamak ve almak için nesneleri kullanmaya odaklanabileceğimiz ve
bellekte gerçekte nereye yerleştirildikleri konusunda endişelenmemize gerek olmadığı anlamına gelir.
Nesneler isimlendirilmiş veya isimsiz (anonim) olabilir. 
Adlandırılmış nesneye "değişken" denir ve nesnenin adına "tanımlayıcı" denir. 
Programlarımızda yarattığımız ve kullandığımız nesnelerin çoğu değişken olacaktır.

        # Temsili RAM Yapısı

        Adres        Değer                Adres: 30 daireli bir apartmanda kapı numaraları olmalı. bunlara da değişken diyoruz.
        ------------------
        0                x
        1                x
        2                x
        3                x
        59743            x
        544926           x
        995321           2
        9232732          4
        9248572          9
        4722011          5

        1. Bir hafıza hücresine veri yerleştirebilmek için adresini bilmeniz gerekiyor.
        2. Hafıza adresleri karışık sayılardan oluşur ve bunları aklınızda tutmanız ve yönetmeniz çok zordur.
        3. Bu yüzden RAM üzerinde işlem yapmak için değişkenleri kullanıyoruz.


        int Sayı;        (Değişken türü        Değişken Adı)


Değişken Adı Olarak Kullanılamaz
C++ Anahtar Kelimeler
Aşağıdaki liste, C++ 'da ayrılmış sözcükleri gösterir. 
Bu ayrılmış sözcükler, sabit ya da değişken ya da başka herhangi bir tanımlayıcı isim olarak kullanılamaz.
asm         else         new                 this
auto         enum         operator         throw
bool         explicit         private         true
break         export         protected         try
case          extern        public         typedef
catch         false         register         typeid
char         float         reinterpret_cast         typename
class         for         return                 union
const         friend         short                 unsigned
const_cast         goto         signed                 using
continue         if         sizeof            virtual
default         inline         static         void
delete         int         static_cast         volatile
do         long                 struct         wchar_t
double         mutable         switch         while
dynamic_cast         namespace         template

küçük ve büyük harfe duyarlıdır.





























